generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "cockroachdb"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id            String            @id @default(cuid())
  name          String
  email         String            @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  password      String
  birth         String
  PhoneNumber   BigInt
  Subscribed    Boolean           @default(false)
  isAdmin       Boolean           @default(false)
  isArtist      Boolean           @default(false)
  accounts      Account[]
  Authenticator Authenticator[]
  sessions      Session[]
  plan          SubscriptionPlan?
}

model SubscriptionPlan {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  duration    String
  isFeatured  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userID      String   @unique
  User        User     @relation(fields: [userID], references: [id], onDelete: Cascade)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model imgFile {
  id        String    @id @default(cuid())
  userId    String
  imageUrl  String
  name      String
  typeLog   ImageType
  size      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Album {
  id           String       @id @default(cuid())
  name         String
  release_date String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  authorId     String
  cover        AlbumImg?
  songList     AudioFile[]
  artistList   artistList[]
}

model AlbumImg {
  id         String   @id @default(cuid())
  imageUrl   String
  name       String
  type       String
  size       String
  albumId    String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  firebaseId String
  album      Album    @relation(fields: [albumId], references: [id], onDelete: Cascade)
}

model artistList {
  id      String @id @default(cuid())
  name    String
  albumId String
  Album   Album  @relation(fields: [albumId], references: [id], onDelete: Cascade)
}

model AudioFile {
  id         String    @id @default(cuid())
  audioUrl   String
  name       String
  type       String
  size       String
  duration   Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  albumId    String
  firebaseId String
  Album      Album     @relation(fields: [albumId], references: [id], onDelete: Cascade)
  AudioImg   AudioImg?
}

model AudioImg {
  id        String    @id @default(cuid())
  userId    String
  imageUrl  String
  name      String
  type      String
  size      String
  duration  Int
  authorId  String
  AudioId   String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  AudioFile AudioFile @relation(fields: [AudioId], references: [id], onDelete: Cascade)
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum ImageType {
  songImg
  album
}
